#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var child_process_1 = require("child_process");
var proxy_agent_1 = require("proxy-agent");
var index_1 = require("./index");
// To be used as CLI
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var command, _a, _b, MINI_APP_ID, ACCESS_TOKEN, _c, APP_ID, APP_SECRET, REFRESH_TOKEN, nodeFetch_1, fetcher, _d, error, error_description, access_token, refresh_token;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    command = process.argv[2];
                    _a = command;
                    switch (_a) {
                        case "deploy": return [3 /*break*/, 1];
                        case "login": return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 5];
                case 1:
                    _b = process.argv.slice(3), MINI_APP_ID = _b[0], ACCESS_TOKEN = _b[1];
                    (0, child_process_1.execSync)("printf \"\\033[B\n".concat(ACCESS_TOKEN ? ACCESS_TOKEN : "$NEW_ACCESS_TOKEN", "\" | APP_ID=").concat(MINI_APP_ID, " zmp login"));
                    (0, child_process_1.execSync)('printf "\\033[B\n`git log -1 --pretty=%B`" | zmp deploy');
                    return [3 /*break*/, 6];
                case 2:
                    _c = process.argv.slice(3), APP_ID = _c[0], APP_SECRET = _c[1], REFRESH_TOKEN = _c[2];
                    if (!APP_ID || !APP_SECRET || !REFRESH_TOKEN) {
                        throw new Error("Please put ZALO_APP_ID, ZALO_APP_SECRET, ZALO_REFRESH_TOKEN inside environment variables. If you are using Github Actions, put it inside Secrets!");
                    }
                    return [4 /*yield*/, import("node-fetch")];
                case 3:
                    nodeFetch_1 = (_e.sent())["default"];
                    fetcher = function (url, options) {
                        return nodeFetch_1(url, __assign(__assign({}, options), { agent: new proxy_agent_1.ProxyAgent() }));
                    };
                    return [4 /*yield*/, (0, index_1.renewAccessToken)(APP_ID, APP_SECRET, REFRESH_TOKEN, fetcher)];
                case 4:
                    _d = _e.sent(), error = _d.error, error_description = _d.error_description, access_token = _d.access_token, refresh_token = _d.refresh_token;
                    if (error) {
                        throw new Error(error_description);
                    }
                    else {
                        // Pass these env into the next jobs. If you're using Github Actions, it would look like this >> $GITHUB_ENV
                        // Please don't change APP_ID & ZMP_TOKEN, otherwise zmp-cli won't collect it
                        // Save this refresh token back, the old refresh token is now invalid
                        console.log([
                            "NEW_ACCESS_TOKEN=".concat(access_token),
                            "NEW_REFRESH_TOKEN=".concat(refresh_token),
                        ].join("\n"));
                    }
                    return [3 /*break*/, 6];
                case 5: throw new Error("Operation not supported!");
                case 6: return [2 /*return*/];
            }
        });
    });
}
main();
