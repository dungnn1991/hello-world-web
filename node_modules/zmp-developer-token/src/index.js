"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.getDeveloperAccessToken = exports.renewAccessToken = void 0;
function renewAccessToken(app_id, secret_key, refresh_token, fetcher) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetcher("https://oauth.zaloapp.com/v4/access_token", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded",
                            secret_key: secret_key
                        },
                        body: new URLSearchParams({
                            grant_type: "refresh_token",
                            app_id: app_id,
                            refresh_token: refresh_token
                        })
                    })];
                case 1: return [2 /*return*/, (_a.sent()).json()];
            }
        });
    });
}
exports.renewAccessToken = renewAccessToken;
/**
 * Use your Refresh token + App secret to get a fresh access token, only use this when you're on a local development machine where JSBridge return the "DEFAULT ACCESS TOKEN".
 * @param namespace If you have multiple mini apps inside one domain, specify a unique namespace otherwise it would get overwriten by each other
 * @returns The access token access
 */
var getDeveloperAccessToken = function (namespace) { return __awaiter(void 0, void 0, void 0, function () {
    var prefix, APP_ID, APP_SECRET, REFRESH_TOKEN, ACCESS_TOKEN, showSetupGuide, appId, appSecret, currentRefreshToken, _a, error, error_description, access_token, refresh_token;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                prefix = namespace ? "zdt.".concat(namespace) : "zdt";
                APP_ID = "".concat(prefix, ".appId");
                APP_SECRET = "".concat(prefix, ".appSecret");
                REFRESH_TOKEN = "".concat(prefix, ".refreshToken");
                ACCESS_TOKEN = "".concat(prefix, ".accessToken");
                showSetupGuide = function () {
                    var _a, _b, _c;
                    console.log("[Development Mode Only] Please provide valid App Id, App Secret and initial Refresh Token. For example:", "\nlocalStorage.setItem('".concat(APP_ID, "', '").concat((_a = localStorage.getItem(APP_ID)) !== null && _a !== void 0 ? _a : "", "');"), "\nlocalStorage.setItem('".concat(APP_SECRET, "', '").concat((_b = localStorage.getItem(APP_SECRET)) !== null && _b !== void 0 ? _b : "", "');"), "\nlocalStorage.setItem('".concat(REFRESH_TOKEN, "', '").concat((_c = localStorage.getItem(REFRESH_TOKEN)) !== null && _c !== void 0 ? _c : "", "');"));
                    return "";
                };
                appId = localStorage.getItem(APP_ID);
                appSecret = localStorage.getItem(APP_SECRET);
                currentRefreshToken = localStorage.getItem(REFRESH_TOKEN);
                if (!appId || !appSecret || !currentRefreshToken) {
                    return [2 /*return*/, showSetupGuide()];
                }
                return [4 /*yield*/, renewAccessToken(appId, appSecret, currentRefreshToken, fetch)];
            case 1:
                _a = _b.sent(), error = _a.error, error_description = _a.error_description, access_token = _a.access_token, refresh_token = _a.refresh_token;
                if (error) {
                    throw error_description;
                }
                else {
                    localStorage.setItem(ACCESS_TOKEN, access_token);
                    localStorage.setItem(REFRESH_TOKEN, refresh_token);
                    return [2 /*return*/, access_token];
                }
                return [2 /*return*/];
        }
    });
}); };
exports.getDeveloperAccessToken = getDeveloperAccessToken;
