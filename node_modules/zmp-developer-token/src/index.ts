export async function renewAccessToken(
  app_id: string,
  secret_key: string,
  refresh_token: string,
  fetcher: typeof fetch
): Promise<any> {
  return (
    await fetcher("https://oauth.zaloapp.com/v4/access_token", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        secret_key,
      },
      body: new URLSearchParams({
        grant_type: "refresh_token",
        app_id,
        refresh_token,
      }),
    })
  ).json();
}

/**
 * Use your Refresh token + App secret to get a fresh access token, only use this when you're on a local development machine where JSBridge return the "DEFAULT ACCESS TOKEN".
 * @param namespace If you have multiple mini apps inside one domain, specify a unique namespace otherwise it would get overwriten by each other
 * @returns The access token access
 */
export const getDeveloperAccessToken = async (
  namespace?: string
): Promise<string> => {
  const prefix = namespace ? `zdt.${namespace}` : `zdt`;
  const APP_ID = `${prefix}.appId`;
  const APP_SECRET = `${prefix}.appSecret`;
  const REFRESH_TOKEN = `${prefix}.refreshToken`;
  const ACCESS_TOKEN = `${prefix}.accessToken`;

  const showSetupGuide = () => {
    console.log(
      `[Development Mode Only] Please provide valid App Id, App Secret and initial Refresh Token. For example:`,
      `\nlocalStorage.setItem('${APP_ID}', '${
        localStorage.getItem(APP_ID) ?? ""
      }');`,
      `\nlocalStorage.setItem('${APP_SECRET}', '${
        localStorage.getItem(APP_SECRET) ?? ""
      }');`,
      `\nlocalStorage.setItem('${REFRESH_TOKEN}', '${
        localStorage.getItem(REFRESH_TOKEN) ?? ""
      }');`
    );
    return "";
  };

  const appId = localStorage.getItem(APP_ID);
  const appSecret = localStorage.getItem(APP_SECRET);
  const currentRefreshToken = localStorage.getItem(REFRESH_TOKEN);
  if (!appId || !appSecret || !currentRefreshToken) {
    return showSetupGuide();
  }

  const { error, error_description, access_token, refresh_token } =
    await renewAccessToken(appId, appSecret, currentRefreshToken, fetch);
  if (error) {
    throw error_description;
  } else {
    localStorage.setItem(ACCESS_TOKEN, access_token);
    localStorage.setItem(REFRESH_TOKEN, refresh_token);
    return access_token;
  }
};
