import { QueryClient } from '@tanstack/query-core';
import type { DefaultError, InfiniteData, InfiniteQueryObserverOptions, InfiniteQueryObserverResult, QueryKey, WithRequired } from '@tanstack/query-core';
import { Atom, type Getter } from 'jotai/vanilla';
export declare function atomWithInfiniteQuery<TQueryFnData, TError = DefaultError, TData = InfiniteData<TQueryFnData>, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(getOptions: (get: Getter) => InfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>, getQueryClient?: (get: Getter) => QueryClient): Atom<InfiniteQueryObserverResult<TData, TError>>;
interface InfiniteQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = InfiniteData<TQueryFnData>, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown> extends WithRequired<Omit<InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey, TPageParam>, 'suspense'>, 'queryKey'> {
}
export {};
