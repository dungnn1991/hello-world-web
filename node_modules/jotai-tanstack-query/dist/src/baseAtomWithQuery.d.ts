import { DefaultError, DefaultedInfiniteQueryObserverOptions, DefaultedQueryObserverOptions, InfiniteQueryObserver, InfiniteQueryObserverResult, InfiniteQueryObserverSuccessResult, QueryClient, QueryKey, QueryObserver, QueryObserverResult, QueryObserverSuccessResult } from '@tanstack/query-core';
import { Atom, Getter } from 'jotai';
export declare function baseAtomWithQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(getOptions: (get: Getter) => DefaultedQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> & {
    suspense: true;
    enabled: true;
}, getObserver: (get: Getter) => QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>, getQueryClient?: (get: Getter) => QueryClient): Atom<Promise<QueryObserverSuccessResult<TData, TError>>>;
export declare function baseAtomWithQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(getOptions: (get: Getter) => DefaultedQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> & {
    suspense: false;
}, getObserver: (get: Getter) => QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>, getQueryClient?: (get: Getter) => QueryClient): Atom<QueryObserverResult<TData, TError>>;
export declare function baseAtomWithQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(getOptions: (get: Getter) => DefaultedInfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey, TPageParam> & {
    suspense: true;
    enabled: true;
}, getObserver: (get: Getter) => InfiniteQueryObserver<TQueryFnData, TError, TData, TQueryFnData, TQueryKey, TPageParam>, getQueryClient?: (get: Getter) => QueryClient): Atom<Promise<InfiniteQueryObserverSuccessResult<TData, TError>>>;
export declare function baseAtomWithQuery<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(getOptions: (get: Getter) => DefaultedInfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey, TPageParam> & {
    suspense: false;
}, getObserver: (get: Getter) => InfiniteQueryObserver<TQueryFnData, TError, TData, TQueryFnData, TQueryKey, TPageParam>, getQueryClient?: (get: Getter) => QueryClient): Atom<InfiniteQueryObserverResult<TData, TError>>;
