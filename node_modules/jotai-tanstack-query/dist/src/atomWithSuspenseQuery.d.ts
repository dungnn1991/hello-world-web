import { type DefinedQueryObserverResult, QueryClient, type QueryKey, type QueryObserverOptions } from '@tanstack/query-core';
import { Atom, Getter } from 'jotai';
export declare const atomWithSuspenseQuery: <TQueryFnData = unknown, TError = Error, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(getOptions: (get: Getter) => Omit<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey, never>, "suspense" | "enabled">, getQueryClient?: (get: Getter) => QueryClient) => Atom<DefinedQueryObserverResult<TData, TError> | Promise<DefinedQueryObserverResult<TData, TError>>>;
