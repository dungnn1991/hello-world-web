import type { DefaultedQueryObserverOptions, Query, QueryKey, QueryObserverResult, ThrowOnError } from '@tanstack/query-core';
export declare const shouldSuspend: (defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any> | undefined, result: QueryObserverResult<any, any>, isRestoring: boolean) => boolean | undefined;
export declare const willFetch: (result: QueryObserverResult<any, any>, isRestoring: boolean) => boolean;
export declare const getHasError: <TData, TError, TQueryFnData, TQueryData, TQueryKey extends QueryKey>({ result, throwOnError, query, }: {
    result: QueryObserverResult<TData, TError>;
    throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey> | undefined;
    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>;
}) => boolean;
export declare function shouldThrowError<T extends (...args: any[]) => boolean>(throwOnError: boolean | T | undefined, params: Parameters<T>): boolean;
