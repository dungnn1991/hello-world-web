import { type MutationObserverOptions, QueryClient } from '@tanstack/query-core';
import { Getter } from 'jotai';
export declare function atomWithMutation<TData = unknown, TVariables = void, TError = unknown, TContext = unknown>(getOptions: (get: Getter) => MutationObserverOptions<TData, TError, TVariables, TContext>, getQueryClient?: (get: Getter) => QueryClient): import("jotai").Atom<{
    mutate: (variables: TVariables, options?: MutationObserverOptions<TData, TError, TVariables, TContext>) => void;
    mutateAsync: import("@tanstack/query-core/build/legacy/queryClient-IoYjXsnV").ar<TData, TError, TVariables, TContext>;
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: TContext | undefined;
    failureCount: number;
    failureReason: TError | null;
    isPaused: boolean;
    submittedAt: number;
} | {
    mutate: (variables: TVariables, options?: MutationObserverOptions<TData, TError, TVariables, TContext>) => void;
    mutateAsync: import("@tanstack/query-core/build/legacy/queryClient-IoYjXsnV").ar<TData, TError, TVariables, TContext>;
    data: undefined;
    variables: TVariables;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: TContext | undefined;
    failureCount: number;
    failureReason: TError | null;
    isPaused: boolean;
    submittedAt: number;
} | {
    mutate: (variables: TVariables, options?: MutationObserverOptions<TData, TError, TVariables, TContext>) => void;
    mutateAsync: import("@tanstack/query-core/build/legacy/queryClient-IoYjXsnV").ar<TData, TError, TVariables, TContext>;
    data: undefined;
    error: TError;
    variables: TVariables;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: TContext | undefined;
    failureCount: number;
    failureReason: TError | null;
    isPaused: boolean;
    submittedAt: number;
} | {
    mutate: (variables: TVariables, options?: MutationObserverOptions<TData, TError, TVariables, TContext>) => void;
    mutateAsync: import("@tanstack/query-core/build/legacy/queryClient-IoYjXsnV").ar<TData, TError, TVariables, TContext>;
    data: TData;
    error: null;
    variables: TVariables;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: TContext | undefined;
    failureCount: number;
    failureReason: TError | null;
    isPaused: boolean;
    submittedAt: number;
}>;
