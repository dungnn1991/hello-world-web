import { DefaultError, InfiniteData, InfiniteQueryObserverOptions, InfiniteQueryObserverSuccessResult, QueryClient, type QueryKey } from '@tanstack/query-core';
import { Atom, Getter } from 'jotai';
export declare const atomWithSuspenseInfiniteQuery: <TQueryFnData = unknown, TError = Error, TData = InfiniteData<TQueryFnData, unknown>, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown>(getOptions: (get: Getter) => SuspenseInfiniteQueryOptions<TQueryFnData, TError, TPageParam, TData, TQueryKey>, getQueryClient?: (get: Getter) => QueryClient) => Atom<Promise<InfiniteQueryObserverSuccessResult<TData, TError>>>;
interface SuspenseInfiniteQueryOptions<TQueryFnData = unknown, TError = DefaultError, TPageParam = unknown, TData = InfiniteData<TQueryFnData>, TQueryKey extends QueryKey = QueryKey> extends Omit<InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey, TPageParam>, 'enabled' | 'throwOnError' | 'placeholderData'> {
}
export {};
